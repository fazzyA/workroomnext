
'use client'
import { useState } from 'react';
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import AIPrompt from "./components/Prompt";
import { Providers } from "./providers";
import { Modal, ModalOverlay, ModalContent, Input, Text, ModalCloseButton, Flex, Button, Link, Heading, Box, } from '@chakra-ui/react';
import { SearchIcon } from '@chakra-ui/icons';
import axios from 'axios';

const inter = Inter({ subsets: ["latin"] });


// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const [isOpen, setIsOpen] = useState(false);
  const [input, setInput] = useState('');

  // async function getChatGPTResponse(prompt: string) {
  //   const response = await fetch('https://api.openai.com/v1/completions', {
  //     method: 'POST',
  //     headers: {
  //       'Content-Type': 'application/json',
  //       'Authorization': 'Bearer YOUR_API_KEY_HERE',
  //     },
  //     body: JSON.stringify({
  //       prompt: prompt,
  //       max_tokens: 100,  // Adjust as needed
  //       model: 'text-davinci-002',  // Specify the model
  //     }),
  //   });
  //   const data = await response.json();
  //   return data.choices[0].text.trim();
  // }
  async function fetchDataFromAPI() {
    try {
      const response = await axios.get(`https://jsonplaceholder.typicode.com/users?inp=${encodeURIComponent(input)}`);
      console.log('Response from fake API:', response.data);
      // Handle the API response here
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  }

  return (
    <html lang="en" >
      <body className={inter.className}  >
        <Providers >
          <Box bg="#00000029" py={2}>
            <Flex justifyContent="space-between" alignItems="center" mt={3} m={3}  >
              <Heading as='h3' size='lg'>WorkRoom</Heading>
              <ul>
                <li>
                  <Link href="/examples/basic" _hover={{ color: 'blue.500', fontWeight: 'normal', textDecoration:"underline" , transition: 'color 0.3s, font-weight 0.3s, '}}>Basic</Link>
                </li>
                <li>
                  <Link href="/examples/getCellValue" _hover={{ color: 'blue.500', fontWeight: 'normal', textDecoration:"underline" ,  transition: 'color 0.3s, font-weight 0.3s, '}}>Get Cell Value</Link>
                </li>
                <li>
                  <Link href="/examples/getSelection" _hover={{ color: 'blue.500', fontWeight: 'normal', textDecoration:"underline" ,  transition: 'color 0.3s, font-weight 0.3s, '}}>Get Selection</Link>
                </li>
                <li>
                  <Link href="/examples/setCellValue" _hover={{ color: 'blue.500', fontWeight: 'normal',  textDecoration:"underline" ,  transition: 'color 0.3s, font-weight 0.3s, '}}>Set Cell Value</Link>
                </li>
                <li>
                  <Link href="/examples/setCellFormat" _hover={{ color: 'blue.500', fontWeight: 'normal',  textDecoration:"underline" ,  transition: 'color 0.3s, font-weight 0.3s, '}}>Format Cell</Link>
                </li>
                <li>
                  <Link href="/examples/autoFill" _hover={{ color: 'blue.500', fontWeight: 'normal',  textDecoration:"underline" ,   transition: 'color 0.3s, font-weight 0.3s, '}}>AutoFill Cell</Link>
                </li>
                <li>
                  <Link href="/examples/setSelection" _hover={{ color: 'blue.500', fontWeight: 'normal',  textDecoration:"underline" ,   transition: 'color 0.3s, font-weight 0.3s,'}}>Merge Selected Cells</Link>
                </li>
              </ul>

              <Button m={1} mr={4} colorScheme='red' border="2px solid #E53E3E" onClick={() => setIsOpen(true)}> <SearchIcon w={4} h={4} mr={2} />Ask AI</Button>
            </Flex>
          </Box>
          {/* <div><AIPrompt /></div> */}
          {children}

          <Modal isOpen={isOpen} onClose={() => setIsOpen(false)} size="md" isCentered={false} motionPreset="slideInBottom">
            <ModalOverlay />
            <ModalContent
              position="absolute"
              top={20}
              right={0}
              p={4}
              m={4}
              boxShadow="lg"
              bg="white"
              borderRadius="md"
              maxW="35vw"
              overflow="hidden"
              height={500}
            >

              <Flex flexDirection="column" border="1px solid #E2E8F0" borderRadius="md" m={2} p={4} height={700}>
                <Text style={{ fontWeight: "800" }} ml={2} fontSize='xl' mb={5}>
                  New Google Search
                </Text>
                <Text style={{ fontWeight: "700" }} fontSize='md' ml={2}>Search Query</Text>
                <Text fontSize='sm' ml={2} mt={1}>The Google results to this searchquery will be scraped.</Text>
                <Input value={input} onChange={(e) => setInput(e.target.value)} ml={2} width='auto' mt={3} placeholder='Example: #firstname #lastname linkedin profile' size='md' />
                <Button ml={2} colorScheme='red' width='auto' mt={5} onClick={fetchDataFromAPI}>Run for 10 rows</Button>
                <ModalCloseButton />
              </Flex>
            </ModalContent>
          </Modal>
        </Providers>
      </body>
    </html >
  );
}