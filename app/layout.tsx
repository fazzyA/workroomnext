
'use client'
import { useState } from 'react';
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import AIPrompt from "./components/Prompt";
import { Providers } from "./providers";
import { Flex, Button, Link, Heading, Box, } from '@chakra-ui/react';
import { SearchIcon } from '@chakra-ui/icons';
import SearchModal from './components/SearchModal';

const inter = Inter({ subsets: ["latin"] });

// export const metadata: Metadata = {
  //   title: "Create Next App",
  //   description: "Generated by create next app",
  // };
  
  // export default function RootLayout({
    //   children,
    // }: Readonly<{
      //   children: React.ReactNode;
// }>) {
  const RootLayout: React.FC<{children: React.ReactNode}> = ({ children }) => {
    // const [isOpen, setIsOpen] = useState(false); 
    
    // async function getChatGPTResponse(prompt: string) {
      //   const response = await fetch('https://api.openai.com/v1/completions', {
        //     method: 'POST',
        //     headers: {
          //       'Content-Type': 'application/json',
          //       'Authorization': 'Bearer YOUR_API_KEY_HERE',
          //     },
          //     body: JSON.stringify({
            //       prompt: prompt,
            //       max_tokens: 100,  // Adjust as needed
            //       model: 'text-davinci-002',  // Specify the model
  //     }),
  //   });
  //   const data = await response.json();
  //   return data.choices[0].text.trim();
  // }
  return (
    <html lang="en" >
      <body className={inter.className}  >
        <Providers >
          {/* <Box bg="#00000029" py={2}>
            <Flex justifyContent="space-between" alignItems="center" mt={3} m={3}  >
              <Heading as='h3' size='lg'>WorkRoom</Heading>
              <ul>
                   <li>
                     <Link href="/examples/basic" _hover={{ color: 'blue.500', fontWeight: 'normal', textDecoration:"underline" , transition: 'color 0.3s, font-weight 0.3s, '}}>Basic</Link>
                 </li>
                  <li>
                    <Link href="/examples/getCellValue" _hover={{ color: 'blue.500', fontWeight: 'normal', textDecoration:"underline" ,  transition: 'color 0.3s, font-weight 0.3s, '}}>Get Cell Value</Link>
                  </li>
               <li>
                 <Link href="/examples/getSelection" _hover={{ color: 'blue.500', fontWeight: 'normal', textDecoration:"underline" ,  transition: 'color 0.3s, font-weight 0.3s, '}}>Get Selection</Link>
               </li>
               <li>
               <Link href="/examples/setCellValue" _hover={{ color: 'blue.500', fontWeight: 'normal',  textDecoration:"underline" ,  transition: 'color 0.3s, font-weight 0.3s, '}}>Set Cell Value</Link>
                </li>
                <li>
                  <Link href="/examples/setCellFormat" _hover={{ color: 'blue.500', fontWeight: 'normal',  textDecoration:"underline" ,  transition: 'color 0.3s, font-weight 0.3s, '}}>Format Cell</Link>
                </li>
             <li>
                  <Link href="/examples/autoFill" _hover={{ color: 'blue.500', fontWeight: 'normal',  textDecoration:"underline" ,   transition: 'color 0.3s, font-weight 0.3s, '}}>AutoFill Cell</Link>
                </li>
                 <li>
                   <Link href="/examples/setSelection" _hover={{ color: 'blue.500', fontWeight: 'normal',  textDecoration:"underline" ,   transition: 'color 0.3s, font-weight 0.3s,'}}>Merge Selected Cells</Link>
                 </li>
               </ul>
              <Button m={1} mr={4} colorScheme='red' border="2px solid #E53E3E" onClick={() => setIsOpen(true)}><SearchIcon w={4} h={4} mr={2} />Ask AI</Button>
            </Flex>
          </Box> */}
          {children}
          {/* <SearchModal isOpen={isOpen} onClose={() => setIsOpen(false)} setIsOpen={setIsOpen} /> */}
        </Providers>
      </body>
    </html >
  );
}

export default RootLayout;
